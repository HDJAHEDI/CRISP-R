/* REXX */
/*----------------------------------------------------------------------------*/
START:
CLRSCN;

DEF_INSTR_ADDR = USERID() || '.PROJECT.JSON(INSTRCTN)';

JSON_STR = '';
LINE.    = '';
TEMP.    = '';
RES = READ_TMPLT(DEF_INSTR_ADDR);
DO I=1 TO LINE.0
   JSON_STR = JSON_STR || STRIP(LINE.I) || ' '
END;
JSON. = '';
RES = JSON2STM(JSON_STR,'JSON');

INTERPRET RES;
RES  =  JSON_PERFORM();

CALL EXIT;
/*----------------------------------------------------------------------------*/
JSON_PERFORM: PROCEDURE EXPOSE JSON. LINE. TEMP.
DO I0 = 1 TO JSON.#TASK.0
   INP_ADDRS = JSON.#TASK.I0.#INP_ADDRS;
   OUT_ADDRS = SPACE(TRANSLATE(JSON.#TASK.I0.#OUT_ADDRS,'  ','()'));
   RES = READ_TMPLT(INP_ADDRS);
   DO I1 = 1 TO JSON.#TASK.I0.#PARM.0
      OLD_STR = JSON.#TASK.I0.#PARM.I1.#OLD_STR;
      NEW_STR = JSON.#TASK.I0.#PARM.I1.#NEW_STR;

      DO I2 = 1 TO LINE.0
         LINE.I2 = REPLACE(LINE.I2,OLD_STR,NEW_STR);
      END;
   END;
   DO I3 = 1 TO JSON.#TASK.I0.#MEMBER.0
      MEMBER_NAME =  JSON.#TASK.I0.#MEMBER.I3.#NAME;
      TEMP.  = '';
      DO I4 = 0 TO LINE.0
         TEMP.I4 = LINE.I4;
      END;
      DO I5 = 1 TO JSON.#TASK.I0.#MEMBER.I3.#PARM.0
         OLD_STR = JSON.#TASK.I0.#MEMBER.I3.#PARM.I5.#OLD_STR;
         NEW_STR = JSON.#TASK.I0.#MEMBER.I3.#PARM.I5.#NEW_STR;
         DO I6 = 1 TO TEMP.0
            TEMP.I6 = REPLACE(TEMP.I6,OLD_STR,NEW_STR);
         END;
      END;
      MEMBER_OUT_ADDRESS = OUT_ADDRS || '(' || MEMBER_NAME || ')';
      RES = WRIT_TMPLT(MEMBER_OUT_ADDRESS);
   END;
END;
RETURN 0;
/*----------------------------------------------------------------------------*/
READ_TMPLT:PROCEDURE EXPOSE LINE.
ARG FNC_TMPLT_ADDR
LINE. = '';
ADDRESS TSO "ALLOC FI(INPTFILE) DA('" || FNC_TMPLT_ADDR || "') SHR REUSE";
RETCODE = RC;
IF   RETCODE <> '0' THEN
     DO
     SAY FNC_TMPLT_ADDR || ' ALLOCATION FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY FNC_TMPLT_ADDR || ' ALLOCATION SUCCESSFUL.'
END;
ADDRESS TSO "EXECIO 0 DISKR INPTFILE (OPEN)";
RETCODE = RC;
IF   RETCODE <> '0' THEN
     DO
     SAY FNC_TMPLT_ADDR || ' OPEN FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY FNC_TMPLT_ADDR || ' OPEN SUCCESSFUL.'
END;

ADDRESS TSO "EXECIO * DISKR INPTFILE (STEM LINE.)";
RETCODE = RC;
IF   RETCODE <> '0' THEN
     DO
     SAY FNC_TMPLT_ADDR || ' READ FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY LINE.0 || ' LINE(S) FROM ' || FNC_TMPLT_ADDR || ' READ SUCCESSFUL.'
END;

ADDRESS TSO "EXECIO 0 DISKR INPTFILE (FINIS)";
RETCODE = RC;
IF   RETCODE <> '0' THEN
     DO
     SAY FNC_TMPLT_ADDR || ' CLOSE FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY FNC_TMPLT_ADDR || ' CLOSE SUCCESSFUL.'
END;

ADDRESS TSO "FREE  FI(INPTFILE)";
RETCODE = RC;
SAY 'FREE  RETCODE: ' || RETCODE;
RETURN RETCODE;
/*----------------------------------------------------------------------------*/
WRIT_TMPLT:PROCEDURE EXPOSE TEMP.
ARG FNC_OUTPT_ADDR;
"ALLOC FI(OUTTFILE) DA('" || FNC_OUTPT_ADDR || "') SHR REUSE";
RETCODE = RC;
IF   RETCODE <> '0' THEN
     DO
     SAY FNC_OUTPT_ADDR || ' ALLOCATION FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY FNC_OUTPT_ADDR || ' ALLOCATION SUCCESSFUL.'
END;
"EXECIO 0 DISKW OUTTFILE (OPEN)";
RETCODE = RC;
IF   RETCODE <> '0' THEN
     DO
     SAY FNC_OUTPT_ADDR || ' OPEN FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY FNC_OUTPT_ADDR || ' OPEN SUCCESSFUL.'
END;

"EXECIO * DISKW OUTTFILE (STEM TEMP.)";
RETCODE = RC;
IF ( RETCODE <> '0' ,
 AND RETCODE <> '1' ) THEN
     DO
     SAY FNC_OUTPT_ADDR || ' WRITE FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY TEMP.0 || ' LINE(S) TO ' || FNC_OUTPT_ADDR || ' WRITE SUCCESSFUL.'
END;

"EXECIO 0 DISKW OUTTFILE (FINIS)";
RETCODE = RC;
IF   RETCODE <> '0' THEN
     DO
     SAY FNC_OUTPT_ADDR || ' CLOSE FAILED RETCODE: ' || RETCODE
     CALL EXIT
     END
ELSE DO
     SAY FNC_OUTPT_ADDR || ' CLOSE SUCCESSFUL.'
END;

"FREE  FI(OUTTFILE)"
RETCODE = RC;
SAY 'FREE  RETCODE: ' || RETCODE;
RETURN RETCODE;
/*----------------------------------------------------------------------------*/
EXIT:
SAY '***------------END OF PROGRAM---------------***',
EXIT;
